import Head from "next/head";
import { useState } from "react";
import { useRouter } from "next/router";
import { FiChevronDown } from "react-icons/fi";
import { CiGlobe } from "react-icons/ci";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import { useTranslation } from "next-i18next";
import { useGlobalContext } from "@/context.jsx";
import { useForm } from "react-hook-form";
export async function getStaticProps({ locale }) {
  return {
    props: {
      ...(await serverSideTranslations(locale, ["home"])),
    },
  };
}

export default function Home(props) {
  const { t } = useTranslation();
  const router = useRouter();
  const [inputType, setInputType] = useState("password");
  const [resInfo, setResInfo] = useState("");
  const { setFormInfo } = useGlobalContext();
  const { register, handleSubmit } = useForm();
  const [loading, setLoading] = useState(false);

  const handleEnterList = (e) => {
    e.preventDefault();
    location.pathname = "/register";
  };
  let info;
  const onSubmit = async (data) => {
    data.passport = data.passport.toUpperCase();
    setLoading(true);
    const response = await fetch(
      "https://vitainline.uz/api/v1/auth/signin/doctor",
      {
        method: "POST",
        mode: "cors",
        cache: "no-cache",
        credentials: "same-origin",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      }
    );

    info = await response.json();
    setFormInfo(info);
    if (response.status == 200) {
      window.localStorage.setItem("token", info.token);
      location.pathname = "account";
      setLoading(false);
    } else {
      if (window.location.pathname === "/ru") {
        setResInfo("Логин или пароль введен неверно. Попробуйте еще раз!");
      } else {
        setResInfo("Login yoki parol xato kiritilgan. Qayta urinib ko'ring!");
      }
    }
  };
  setTimeout(() => {
    setResInfo("");
  }, 5000);

  const ChangeLangBtn = (e) => {
    let lang = e.target.value;
    if (lang === "ru") {
      router.push("/ru");
    } else {
      window.location.pathname = "";
    }
  };

  return (
    <div className="bg-[#F5FAFB] w-full">
      <Head>
        <title>Vita in line</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex overflow-auto login-page  w-[100vw]">
        <div className="">
          <div className=" w-[250px] lg:w-auto mx-auto relative">
            <span className=" absolute bg-[url('../images/top-left.png')] bg-cover left-[56px] top-[40px] sm:bg-center w-[100px] md:w-[250px] sm:h-[316] h-[125px] md:left-[px] md:top-[0px] bg-no-repeat"></span>
            <span className="absolute bg-[url('../images/top-bottom.png')] left-[250px] top-[300px] bg-cover w-[120px] h-[130px]  lg:left-[56px] lg:top-[323px] bg-no-repeat"></span>
            <span className="absolute bg-[url('../images/middle.png')]  bg-cover w-0 h-[130px] left-5 lg:left-[471px] lg:top-[54px] bg-no-repeat "></span>
            <span className=" absolute  bg-[url('../images/top-right.png')] md:w-0 bg-cover w-[120px] top-[500px]  h-[130px] right-3  lg:top-[32px] bg-no-repeat"></span>
          </div>
          <div className=" bg-[url('../images/young-doctor1.png')] w-0 md:w-[50vw]  bg-cover h-[100vh] mx-auto bg-no-repeat  left-0 bottom-0 "></div>
        </div>

        <div className=" w-[100vw] flex flex-col justify-center items-center">
          <div className="border relative flex items-center justify-center border-[#C5D7D8] rounded-full bg-white w-[123px] h-[123px] mt-[10px] ">
            <span className="bg-[url('../images/Frame.png')] bg-contain w-[90px] h-[85px] bg-no-repeat absolute"></span>
          </div>
          <div className="flex flex-col items-center w-[300px] md:w-[400px] lg:w-[397px] mt-5 ">
            <h2 className="text-[24px] text-center w-[213px] text-[Black] mx-auto font-[500] leading-[38px]">
              {t("home:enter_system")} <span className="text-[#1BB7B5]"></span>
            </h2>
            <h1 className="z-[3] text-black">{props.locale}</h1>
            <p className="text-center text-red-400 w-[250px] md:w-[350px]  lg:w-[430px]">
              {resInfo}
            </p>
            <form
              action="https://vitainline.uz/api/v1/auth/signin/doctor"
              className="w-full flex flex-col "
              autoComplete="off"
              id="my-awesome-dropzone"
              onSubmit={handleSubmit(onSubmit)}
              method="POST"
              netlify
            >
              <label htmlFor="login" className="mt-[10px] mb-2 text-[#759495]">
                {t("home:login")}
              </label>
              <input
                name="passport"
                maxLength={10}
                className="border uppercase border-[#D7E6E7] rounded-[12px] p-2 dark:bg-white dark:text-black"
                type="text"
                {...register("passport", { required: true })}
                placeholder={t("home:input_login")}
                autoComplete="off"
              />
              <label
                htmlFor="password"
                className="mt-[14px]  mb-2 text-[#759495]"
              >
                {t("home:parol")}
              </label>
              <div className="border relative border-[#D7E6E7] rounded-[12px]">
                <input
                  name="password"
                  type={inputType}
                  minLength={4}
                  className=" w-full p-2 rounded-[12px] dark:bg-white dark:text-black"
                  placeholder="*******"
                  {...register("password", { required: true })}
                  autoComplete="off"
                />
                <span
                  onClick={() => {
                    inputType === "password"
                      ? setInputType("text")
                      : setInputType("password");
                  }}
                  className="bg-[url('../images/glass.png')] w-[22px] bg-no-repeat h-[14px] absolute right-4 top-3"
                ></span>
              </div>
              <button
                type="submit"
                className="mt-[24px] transform- py-[13px] bg-gradient-to-t from-[#1BB7B5] to-[#0EC5C9] text-white rounded-[12px]  font-[500] hover:bg-gradient-to-t hover:from-[#0F9694] hover:to-[#0A7476]"
              >
                {t("home:enter")}
              </button>
              <button
                className="py-[13px] mt-[12px] bg-white text-[#1BB7B5] font-[500] rounded-[12px]
            hover:bg-gradient-to-t  hover:from-[#1BB7B5] hover:to-[#12A7AA] hover:text-white"
                onClick={handleEnterList}
              >
                {t("home:autorization_btn")}
              </button>
            </form>
            {loading ? (
              <button
                disabled
                type="button"
                class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 inline-flex items-center"
              >
                <svg
                  aria-hidden="true"
                  role="status"
                  class="inline w-4 h-4 mr-3 text-white animate-spin"
                  viewBox="0 0 100 101"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                    fill="#E5E7EB"
                  />
                  <path
                    d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                    fill="currentColor"
                  />
                </svg>
                Loading...
              </button>
            ) : (
              ""
            )}
          </div>
          <div className="flex ml-[450px] bottom-2 absolute  w-[111px] h-[36px] dark:text-[#1B3B3C] items-center  justify-between border border-[#D7E6E7] px-2 rounded-[12px]">
            <CiGlobe className="text-[#1BB7B5] text-xl" />
            <select
              onChange={ChangeLangBtn}
              style={{ WebkitAppearance: "none" }}
              className="outline-none  bg-[#F5FAFB] px-2 absolute ml-7 pr-10  bg-transparent font-[500] "
            >
              <option value="uz">UZ</option>
              <option value="ru">RU</option>
            </select>
            <FiChevronDown className="text-xl " />
          </div>
        </div>
      </div>
    </div>
  );
}
